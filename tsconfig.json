{
  "compilerOptions": {
    "outDir": "./dist/",
    // Подсвечивает все места где не указан тип
    // Однако это не означает, что теперь вовсе нельзя использовать any
    // Это означает лишь, что в подобных ситуациях разработчик должен явно писать any.
    "noImplicitAny": true,
    "module": "ESNext",
    // В какую спецификацию компилируем: для поддержки большинства браузеров
    "target": "es6",
    "jsx": "react-jsx",
    // Компилятор будет обрабатывать не только TS файлы, но и JS файлы
    "allowJs": true,
    "strict": true,
    // определяет какие импорты будут
    "moduleResolution": "node",
    // esModuleInterop позволяет работать с пакетами, которые используют
    // common js (require() module.export) как с обычными пакетами с помощью import
    "esModuleInterop": true,
    // Если каккая-либо библиотека не имеет default export, 
    // лоадеры вроде ts-loader или babel-loader автоматически создают их
    // вместо такого импорта
    // import * as React from 'react';
    // можно писать такой
    // import React from 'react';
    "allowSyntheticDefaultImports": true,
    // изолирование типов, ери экспорте типов нужно явно указывать type
    // ускоряет сборку проекта, так как типы выпиливаются из кода
    // также следит, чтобы не было пустых ts файлов
    "isolatedModules": true,
    // Для абсолютного импорта
    "baseUrl": ".",
    // Все абсолютные импорты идут из папки src
    "paths": {
      "*": ["./src/*"]
    }
  },
  // Для использования TS в файле webpack.config.ts
  "ts-node": {
      "compilerOptions": {
          "module": "CommonJS"
      }
  },
  "include": [
    "./config/jest/setupTests.ts",
    "./src/**/*.ts",
    "./src/**/*.tsx",
  ],
}